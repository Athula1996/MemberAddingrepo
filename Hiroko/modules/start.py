import asyncio
import random
from time import time
from datetime import datetime
from config import BOT_USERNAME, OWNER_ID
from pyrogram import filters, Client
from Hiroko import Hiroko, BOT_NAME
from pyrogram.enums import ChatType
from pyrogram.errors import MessageNotModified
from pyrogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from Zebra.Helper.database.chats import add_served_chat
from Zebra.Helper.database.users import add_served_user


# ------------------------------------------------------------------------------- #

START_IMG = (
"https://telegra.ph/file/c4ca1a162f89bdb5b6671.jpg",
"https://telegra.ph/file/d5f41e8fe3c734431d6f1.jpg",
"https://telegra.ph/file/f37357df411a6f546fe69.jpg",
"https://telegra.ph/file/3c82d2ebe9f7c50292acc.jpg"
)



# ------------------------------------------------------------------------------- #

START_TEXT = """
** ú·¥á è ·¥õ ú·¥á Ä·¥á [{}](tg://user?id={}) …¥…™·¥Ñ·¥á ·¥õ·¥è ·¥ç·¥á·¥á·¥õ  è·¥è·¥ú !**
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ**
‡πè …™ ·¥Ä·¥ç {BOT_NAME} ·¥Ä…¥·¥Ö …™  ú·¥Ä·¥†·¥á s·¥ò·¥á·¥Ñ…™·¥Ä ü “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás
‡πè …™ ·¥Ä·¥ç ·¥Ö…™“ì“ì·¥á Ä·¥á…¥·¥õ “ì Ä·¥è·¥ç ·¥Ä…¥·¥è·¥õ ú·¥á Ä ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õs

‡πè ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ ú·¥á  ú·¥á ü·¥©  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ ·¥ç è ·¥ç·¥è·¥Ö·¥ú ü·¥ás ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös**
"""


# ------------------------------------------------------------------------------- #

HELP_TEXT = """**
¬ª {BOT_NAME} ·¥Ñ·¥è·¥è ü ·¥è Ä ·¥áx·¥Ñ ü·¥ús…™·¥†·¥á “ì·¥á·¥Ä·¥õ·¥ú Ä·¥ás 

¬ª ·¥Ä ü ü ·¥èÍú∞ ·¥ç è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú / ·¥è Ä !
¬ª …™Íú∞  è·¥è·¥ú …¢·¥è·¥õ ·¥Ä…¥ è …™ss·¥ú·¥á ·¥è Ä  ô·¥ú…¢ …™…¥ ·¥Ä…¥ è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò·¥è Ä·¥õ …™·¥õ ·¥Ä·¥õ [s·¥ú·¥©·¥©·¥è Ä·¥õ ·¥Ñ ú·¥Ä·¥õ](https://t.me/TheNixaSupport)**
„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§
‚Ä£<code> /start</code> : **Íú±·¥õ·¥Ä Ä·¥õÍú± ·¥ç·¥á | ·¥Ä·¥Ñ·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥õ·¥è ·¥ç·¥á  è·¥è·¥ú'·¥†·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö·¥è…¥·¥á …™·¥õ.**
‚Ä£<code> /donate</code> : **s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥ç·¥á  ô è ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ Íú∞·¥è Ä ·¥ç è  ú·¥Ä Ä·¥Ö·¥°·¥è Ä·¥ã.**
"""



# ------------------------------------------------------------------------------- #

hiroko_buttons = [              
                [
                    InlineKeyboardButton("·¥Ä“ì·¥ã", callback_data="about_"),   
                    InlineKeyboardButton("·¥¢·¥è·¥ç ô…™·¥ás", callback_data="about_"),
                    InlineKeyboardButton("“ì·¥ú…¥", callback_data="about_")
                ],
                [
                    InlineKeyboardButton("…¢…™·¥õ ú·¥ú ô", callback_data="about_"),   
                    InlineKeyboardButton("…™…¥s·¥õ·¥Ä·¥õ·¥ús", callback_data="about_"),
                    InlineKeyboardButton("…¥·¥á·¥ã·¥ès", callback_data="about_")
                ],
                [
                    InlineKeyboardButton("·¥ç…™s·¥Ñ", callback_data="about_"),   
                    InlineKeyboardButton("·¥Ñ ú·¥Ä·¥õ ô·¥è·¥õ", callback_data="about_"),
                    InlineKeyboardButton("s ú·¥è Ä·¥õ·¥á…¥·¥á Ä", callback_data="about_")
                ],
                [
                    InlineKeyboardButton("·¥Ö·¥á·¥†", callback_data="about_"),   
                    InlineKeyboardButton(" ü·¥è·¥Ñ·¥ãs", callback_data="about_"),
                    InlineKeyboardButton("·¥Ä·¥Ñ·¥õ…™·¥è…¥", callback_data="about_")
                ],
                [
                    InlineKeyboardButton("‚ü≤  ô·¥Ä·¥Ñ·¥ã ‚ü≥", callback_data="home_"),
                    InlineKeyboardButton("‚ü≤ ·¥Ñ ü·¥èÍú±·¥á ‚ü≥", callback_data="close_data")
                ]
                ]



# ------------------------------------------------------------------------------- #

@Hiroko.on_message(filters.command(["start"], prefixes=["/", "!"]))
async def start(client: Client, message: Message):    
        get_me = await client.get_me()
        BOT_USERNAME = get_me.username
        buttons = [
            [
                InlineKeyboardButton("‚ûï ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ûï", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
            ],
            [
                InlineKeyboardButton("‚ú® s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚ú®", url="https://t.me/TheNixaSupport"),
                InlineKeyboardButton("üéì ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á Ä", url=f"https://t.me/AnonDeveloper"),
            ],
            [
                InlineKeyboardButton("üìö  ú·¥á ü·¥ò ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös üìö", callback_data="help_")
            ]    
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply_photo(
            photo=random.choice(START_IMG),
            caption=START_TEXT.format(message.from_user.first_name, message.from_user.id),
            reply_markup=reply_markup
        )
        await add_served_user(message.from_user.id)            
        await add_served_chat(message.chat.id)


# ------------------------------------------------------------------------------- #

@Hiroko.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    if query.data=="home_":
        buttons =  [
            [
                InlineKeyboardButton("‚ûï ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ‚ûï", url=f"https://t.me/{BOT_USERNAME}?startgroup=true")
            ],
            [
                InlineKeyboardButton("‚ú® s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚ú®", url="https://t.me/TheNixaSupport"),
                InlineKeyboardButton("üéì ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥á Ä", url=f"https://t.me/AnonDeveloper"),
            ],
            [
                InlineKeyboardButton("üìö  ú·¥á ü·¥ò ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös üìö", callback_data="help_")
            ]    
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        try:
            await query.edit_message_text(
                START_TEXT,
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass


# ------------------------------------------------------------------------------- #
        
    elif query.data=="help_":        
        reply_markup = InlineKeyboardMarkup(zebra_buttons)
        try:
            await query.edit_message_text(
                HELP_TEXT.format(query.from_user.first_name, query.from_user.id),
                reply_markup=reply_markup
            )
        except MessageNotModified:
            pass

  
# ------------------------------------------------------------------------------- #

    elif query.data=="about_":
            await query.answer(("s·¥è·¥è…¥.... \n  ô·¥è·¥õ ·¥ú…¥·¥Ö·¥á Ä …™…¥ ·¥ç·¥Ä…™…¥·¥õ·¥Ä…™…¥·¥Ä…¥·¥Ñ·¥á "), show_alert=True)

  
# ------------------------------------------------------------------------------- #
 
    elif query.data=="close_data":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
        except:
            pass
          

# ------------------------------------------------------------------------------- #


